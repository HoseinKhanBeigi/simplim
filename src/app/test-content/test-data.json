{
  "content": [
    {
      "type": "heading",
      "content": "Getting Started with React Hooks",
      "level": 1
    },
    {
      "type": "paragraph",
      "content": "React Hooks are a powerful feature introduced in React 16.8 that allows you to use state and other React features without writing a class component.React Hooks are a powerful feature introduced in React 16.8 that allows you to use state and other React features without writing a class component.React Hooks are a powerful feature introduced in React 16.8 that allows you to use state and other React features without writing a class component.React Hooks are a powerful feature introduced in React 16.8 that allows you to use state and other React features without writing a class component."
    },
    {
      "type": "heading",
      "content": "Common Hooks",
      "level": 2
    },
    {
      "type": "list",
      "style": "unordered",
      "items": [
        "useState - For managing state in functional components",
        "useEffect - For handling side effects",
        "useContext - For consuming context",
        "useReducer - For complex state management",
        "useCallback - For memoizing functions",
        "useMemo - For memoizing values"
      ]
    },
    {
      "type": "heading",
      "content": "Example Usage",
      "level": 2
    },
    {
      "type": "code",
      "content": "import { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `Count: ${count}`;\n  }, [count]);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}",
      "language": "javascript"
    },
    {
      "type": "heading",
      "content": "Best Practices",
      "level": 2
    },
    {
      "type": "list",
      "style": "ordered",
      "items": [
        "Only call hooks at the top level of your component",
        "Only call hooks from React function components",
        "Use multiple useEffect hooks to separate concerns",
        "Include all dependencies in the useEffect dependency array"
      ]
    },
    {
      "type": "quote",
      "content": "Hooks are a way to reuse stateful logic, not state itself. In fact, each call to a Hook has a completely isolated state."
    },
    {
      "type": "heading",
      "content": "Performance Comparison",
      "level": 2
    },
    {
      "type": "table",
      "columns": ["Feature", "Class Components", "Hooks"],
      "rows": [
        ["State Management", "this.setState()", "useState()"],
        ["Lifecycle Methods", "componentDidMount, etc.", "useEffect()"],
        ["Context", "static contextType", "useContext()"],
        ["Code Organization", "Scattered across methods", "Grouped by feature"]
      ]
    }
  ]
} 